defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/python:3.9
    - image: circleci/postgres:12
      environment:
        - POSTGRES_USER=ubuntu
        - POSTGRES_DB=db_name
        - POSTGRES_PASSWORD=password
    - image: localstack/localstack:0.11.4
      ports:
        - "4566:4566"
      environment:
        - SERVICES=s3
        - DEFAULT_REGION=us-east-1

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: sudo apt-get update && sudo apt-get install -y binutils libproj-dev gdal-bin libgeos-dev
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          command: |
            . venv/bin/activate
            pip install coverage mock
      - run:
          command: mv env.test .env
      - run:
          command: |
            . venv/bin/activate
            coverage run --omit 'venv/*' --branch --source . manage.py test
          environment:
            ENVIRONMENT: "test"
            DATABASE_URL: "postgres://ubuntu:password@localhost:5432/db_name"
      - run:
          command: |
            . venv/bin/activate
            coverage html -d coverage-reports
      - store_artifacts:
          path: coverage-reports/

  deploy-staging:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      - run: sudo pip install ecs-deploy awscli
      - run: sudo curl -sL https://sentry.io/get-cli/ | bash
      - run: eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email | sed 's|https://||')
      - run: echo 'export VERSION="'$(date +%Y-%m-%dT%H:%M:%S)'"' >> $BASH_ENV; source $BASH_ENV
      - run: echo 'export SENTRY_RELEASE="$SENTRY_PROJECT@'${VERSION}'"' >> $BASH_ENV; source $BASH_ENV
      - run:
          name: build
          command: |
            docker build \
            --build-arg SENTRY_RELEASE=${SENTRY_RELEASE} \
            -t the-eye-django .
      - run: docker tag the-eye-django:latest $ECR_REPO_STAGING:staging
      - run: docker push $ECR_REPO_STAGING:staging
      - run: ecs deploy $AWS_CLUSTER_STAGING $AWS_SERVICE_STAGING --timeout $AWS_TIMEOUT
      - run: sentry-cli releases new -p $SENTRY_PROJECT ${VERSION}
      - run: sentry-cli releases set-commits --auto ${VERSION}
      - run: sentry-cli releases finalize ${VERSION}
      - run: sentry-cli releases deploys ${VERSION} new -e staging
      - run: ecs deploy -t $CIRCLE_TAG $AWS_CLUSTER_STAGING $AWS_SERVICE_CELERY_STAGING --timeout $AWS_TIMEOUT
      - run: ecs deploy -t $CIRCLE_TAG $AWS_CLUSTER_STAGING $AWS_SERVICE_CELERYBEAT_STAGING --timeout $AWS_TIMEOUT

  deploy-production:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      - run: sudo pip install ecs-deploy awscli
      - run: sudo curl -sL https://sentry.io/get-cli/ | bash
      - run: eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email | sed 's|https://||')
      - run: echo 'export VERSION="'$(date +%Y-%m-%dT%H:%M:%S)'"' >> $BASH_ENV; source $BASH_ENV
      - run: echo 'export SENTRY_RELEASE="$SENTRY_PROJECT@'${VERSION}'"' >> $BASH_ENV; source $BASH_ENV
      - run:
          name: build
          command: |
            docker build \
            --build-arg SENTRY_RELEASE=${SENTRY_RELEASE} \
            -t the-eye-django .
      - run: docker tag the-eye-django:latest $ECR_REPO_PRODUCTION:$CIRCLE_TAG
      - run: docker push $ECR_REPO_PRODUCTION:$CIRCLE_TAG
      - run: ecs deploy -t $CIRCLE_TAG $AWS_CLUSTER_PRODUCTION $AWS_SERVICE_PRODUCTION --timeout $AWS_TIMEOUT
      - run: sentry-cli releases new -p $SENTRY_PROJECT ${VERSION}
      - run: sentry-cli releases set-commits --auto ${VERSION}
      - run: sentry-cli releases finalize ${VERSION}
      - run: sentry-cli releases deploys ${VERSION} new -e production
      - run: ecs deploy -t $CIRCLE_TAG $AWS_CLUSTER_PRODUCTION $AWS_SERVICE_CELERY_PRODUCTION --timeout $AWS_TIMEOUT
      - run: ecs deploy -t $CIRCLE_TAG $AWS_CLUSTER_PRODUCTION $AWS_SERVICE_CELERYBEAT_PRODUCTION --timeout $AWS_TIMEOUT

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - deploy-staging:
          filters:
            branches:
              only:
                - staging
          requires:
            - build
      - deploy-production:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
          requires:
            - build
